pipeline {
    agent any

    environment {
        DOCKER_IMAGE_NAME = 'my-app'
        DOCKER_IMAGE_TAG = 'latest'
        K8S_NAMESPACE = 'my-namespace'
        K8S_DEPLOYMENT_NAME = 'my-app-deployment'
        K8S_SERVICE_NAME = 'my-app-service'
        K8S_INGRESS_NAME = 'my-app-ingress'
    }

    stages {
        stage('Build Docker image') {
            steps {
                script {
                    docker.withRegistry("${DOCKER_REGISTRY}", "${DOCKERHUB_CREDENTIALS_USR}:${DOCKERHUB_CREDENTIALS_PSW}") {
                        def dockerImage = docker.build("${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}", "-f docker/app/Dockerfile .")
                        dockerImage.push()
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                withCredentials([kubeconfigFile(credentialsId: 'kubeconfig', variable: 'KUBECONFIG')]) {
                    sh 'kubectl apply -f kubernetes/configs/app-config.yml --namespace $K8S_NAMESPACE'
                    sh "kubectl set image deployment/$K8S_DEPLOYMENT_NAME $K8S_DEPLOYMENT_NAME=${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} --namespace $K8S_NAMESPACE"
                    sh 'kubectl apply -f kubernetes/deployments/app-deployment.yml --namespace $K8S_NAMESPACE'
                    sh 'kubectl apply -f kubernetes/services/app-service.yml --namespace $K8S_NAMESPACE'
                    sh 'kubectl apply -f kubernetes/ingress/app-ingress.yml --namespace $K8S_NAMESPACE'
                }
            }
        }
    }
}
